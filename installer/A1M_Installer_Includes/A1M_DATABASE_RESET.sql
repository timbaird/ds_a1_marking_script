CREATE OR REPLACE PROCEDURE A1M_DATABASE_RESET AUTHID CURRENT_USER AS

BEGIN

-- drop the tables
Drop_If_Exists('CUSTOMER', True);
Drop_If_Exists('PRODUCT', True);
Drop_If_Exists('SALE', True);
Drop_If_Exists('LOCATION', True);
Drop_If_Exists('SALE_SEQ', True);
drop_if_exists('NOT_ATTEMPTED', TRUE);

-- drop all assignment functions
drop_if_exists('ADD_CUST_TO_DB'); -- altered
drop_if_exists('ADD_CUSTOMER_VIASQLDEV');
drop_if_exists('DELETE_ALL_CUSTOMERS_FROM_DB');
drop_if_exists('DELETE_ALL_CUSTOMERS_VIASQLDEV');
drop_if_exists('ADD_PROD_TO_DB'); -- altered
drop_if_exists('ADD_PRODUCT_VIASQLDEV');
drop_if_exists('DELETE_ALL_PRODUCTS_FROM_DB');
drop_if_exists('DELETE_ALL_PRODUCTS_VIASQLDEV');
drop_if_exists('GET_CUST_STRING_FROM_DB');
drop_if_exists('GET_CUST_STRING_VIASQLDEV');
drop_if_exists('UPD_CUST_SALESYTD_IN_DB');
drop_if_exists('UPD_CUST_SALESYTD_VIASQLDEV');
drop_if_exists('GET_PROD_STRING_FROM_DB');
drop_if_exists('GET_PROD_STRING_VIASQLDEV');
drop_if_exists('UPD_PROD_SALESYTD_IN_DB');
drop_if_exists('UPD_PROD_SALESYTD_VIASQLDEV');
drop_if_exists('UPD_CUST_STATUS_IN_DB');
drop_if_exists('UPD_CUST_STATUS_VIASQLDEV');
drop_if_exists('ADD_SIMPLE_SALE_TO_DB');
drop_if_exists('ADD_SIMPLE_SALE_VIASQLDEV');
drop_if_exists('SUM_CUST_SALESYTD'); -- altered
drop_if_exists('SUM_CUST_SALES_VIASQLDEV');
drop_if_exists('SUM_PROD_SALESYTD_FROM_DB');
drop_if_exists('SUM_PROD_SALES_VIASQLDEV');
drop_if_exists('GET_ALLCUST'); -- altered
drop_if_exists('GET_ALLCUST_VIASQLDEV');
drop_if_exists('GET_ALLPROD_FROM_DB');
drop_if_exists('GET_ALLPROD_VIASQLDEV');
drop_if_exists('ADD_LOCATION_TO_DB');
drop_if_exists('ADD_LOCATION_VIASQLDEV');
drop_if_exists('ADD_COMPLEX_SALE_TO_DB');
drop_if_exists('ADD_COMPLEX_SALE_VIASQLDEV');
drop_if_exists('GET_ALLSALES_FROM_DB');
drop_if_exists('GET_ALLSALES_VIASQLDEV');
drop_if_exists('COUNT_PRODUCT_SALES_FROM_DB');
drop_if_exists('COUNT_PRODUCT_SALES_VIASQLDEV');
drop_if_exists('DELETE_SALE_FROM_DB');
drop_if_exists('DELETE_SALE_VIASQLDEV');
drop_if_exists('DELETE_ALL_SALES_FROM_DB');
drop_if_exists('DELETE_ALL_SALES_VIASQLDEV');
drop_if_exists('DELETE_CUSTOMER'); -- altered
drop_if_exists('DELETE_CUSTOMER_VIASQLDEV');
drop_if_exists('DELETE_PROD_FROM_DB');
drop_if_exists('DELETE_PROD_VIASQLDEV');

Execute Immediate 
'CREATE TABLE CUSTOMER (
CUSTID	NUMBER
,  CUSTNAME	VARCHAR2(100)
,  SALES_YTD	NUMBER
,  STATUS	VARCHAR2(7)
,  PRIMARY KEY	(CUSTID) 
)';

Execute Immediate 
'CREATE TABLE PRODUCT (
PRODID	NUMBER
, PRODNAME	VARCHAR2(100)
, SELLING_PRICE	NUMBER
, SALES_YTD	NUMBER
, PRIMARY KEY	(PRODID)
)';


Execute Immediate 
'CREATE TABLE SALE (
SALEID	NUMBER
, CUSTID	NUMBER
, PRODID	NUMBER
, QTY	NUMBER
, PRICE	NUMBER
, SALEDATE	DATE
, PRIMARY KEY 	(SALEID)
, FOREIGN KEY 	(CUSTID) REFERENCES CUSTOMER
, FOREIGN KEY 	(PRODID) REFERENCES PRODUCT
)';

Execute Immediate 
'CREATE TABLE LOCATION (
  LOCID	VARCHAR2(5)
, MINQTY	NUMBER
, MAXQTY	NUMBER
, PRIMARY KEY 	(LOCID)
, CONSTRAINT CHECK_LOCID_LENGTH CHECK (LENGTH(LOCID) = 5)
, CONSTRAINT CHECK_MINQTY_RANGE CHECK (MINQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_RANGE CHECK (MAXQTY BETWEEN 0 AND 999)
, CONSTRAINT CHECK_MAXQTY_GREATER_MIXQTY CHECK (MAXQTY >= MINQTY)
)';

Execute Immediate 'CREATE SEQUENCE SALE_SEQ';

-- ADDITIONAL TABLE ADDED TO TRACK PARTS OF ASSIGNMENT NOT ATTEMPTED

Execute Immediate 
'CREATE TABLE NOT_ATTEMPTED(
FNAME VARCHAR2(50)
)';

DOPL('DATABASE RESET COMPLETE');

End;
/